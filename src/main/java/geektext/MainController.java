package geektext;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
//import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.PutMapping;
//import org.springframework.web.bind.annotation.PatchMapping;
//import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URIs start with /user (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@GetMapping(path="/all")
	@ResponseBody // This returns a JSON or XML with the users
	public Iterable<User> getAllUsers() {
		return userRepository.findAll();
	}
	
	@GetMapping(path="/{id}")
	@ResponseBody // This returns a JSON or XML of a single user by id
	public Optional<User> getUser(@PathVariable Integer id) {
		return userRepository.findById(id);
	}
}

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(path="/books")
public class BookController {

    // Hardcoded list of books
    private List<Book> books = new ArrayList<>();

    // Hardcoded sample data for books
    public BookController() {
        books.add(new Book(1, "Book A", "Publisher X", 21.0));
        books.add(new Book(2, "Book B", "Publisher X", 26.0));
        books.add(new Book(3, "Book C", "Publisher Y", 33.0));
        books.add(new Book(4, "Book D", "Publisher Z", 18.0));
    }

    // PUT or PATCH to apply discount
    @PutMapping("/apply-discount")
    public ResponseEntity<Void> applyDiscount(@RequestBody DiscountRequest discountRequest) {
        String publisher = discountRequest.getPublisher();
        double discountPercent = discountRequest.getDiscountPercent();

        // Validate inputs
        if (discountPercent < 0 || discountPercent > 100 || publisher == null || publisher.isEmpty()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        }

        // Apply discount to books from the given publisher
        boolean discountApplied = false;
        for (Book book : books) {
            if (book.getPublisher().equalsIgnoreCase(publisher)) {
                double newPrice = book.getPrice() * (1 - discountPercent / 100);
                book.setPrice(Math.round(newPrice * 100.0) / 100.0);  // Round to 2 decimal places
                discountApplied = true;
            }
        }

        // If no books were found for the given publisher
        if (!discountApplied) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }

        // Return 204 No Content to indicate success to user
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }
}
